/*
 * generated by Xtext
 */
package org.eclipse.xtext.tutorial.survey.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.tutorial.survey.survey.Choice
import org.eclipse.xtext.tutorial.survey.survey.ChoiceQuestion
import org.eclipse.xtext.tutorial.survey.survey.FreeTextQuestion
import org.eclipse.xtext.tutorial.survey.survey.Page
import org.eclipse.xtext.tutorial.survey.survey.Survey

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SurveyGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val allPages = resource.allContents.filter(typeof(Page)).toList
		for(page: allPages) {
			fsa.generateFile(page.getName() + '.html', toHtml(page))
		}
		fsa.generateFile("main/StartServer.java", genrateStartServer)
	}
	
	protected def toHtml(Page it) '''
		<html>
		<head>
			<title>«survey.title»</title>
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			<!-- Bootstrap -->
			<link href="css/bootstrap.css" rel="stylesheet" media="screen">
			<link href="css/survey.css" rel="stylesheet" media="screen">
		</head>
			<body>
				<script src="http://code.jquery.com/jquery.js"></script>
				<script src="js/bootstrap.js"></script>
				<div class="navbar">
						<div class="navbar-inner">
							<a class="brand" href="/">«survey.title»</a>
							<ul class="nav pull-right">
								<li><a href="/evaluate">Evaluate</a></li>
							</ul>
						</div>
					</div>
					
					<div class="container">
						<form class="form-horizontal" method="POST" action="dispatch" class="form-horizontal">
							<input name="survey" type="hidden" value="«survey.name»"/>
							<input name="page" type="hidden" value="«name»"/>
							
							«FOR question: questions»
								«question.controlGroup»
							«ENDFOR»
							
							<div class="control-group">
								<div class="controls">
									<input type="reset" class="btn" value="Reset">
									<input type="submit" class="btn" value="Next">
								</div>
							</div>
						</form>
					</div>
			</body>
		</html>
	'''
	
	protected def dispatch controlGroup(FreeTextQuestion it) '''
		<div class="control-group">
			<label class="control-label">«text»</label>
			<div class="controls">
				<input type="text" name="«name»">
			</div>
		</div>
	'''
	
	protected def dispatch controlGroup(ChoiceQuestion it) {
		val buttonType = if(single) 'radio' else 'checkbox'
		'''
			<div class="control-group">
				<label class="control-label">«text»</label>
				<div class="controls">
						«IF choices.size > 30»
							<select name="«name»" «IF !single»multiple="multiple"«ENDIF»>
								«FOR choice: choices»
									<option value="«choice.nameNotNull»">«choice.text»</option>
								«ENDFOR»
							</select>
						«ELSE»
							«FOR choice: choices»
								<label class="«buttonType»">
									<input type="«buttonType»" name="«name»" value="«choice.nameNotNull»"/>«choice.text»
									«IF choice.freetext»
										&nbsp;<input type="text" name="«name»">
									«ENDIF»
								</label>
							«ENDFOR»
						«ENDIF»
				</div>
			</div>
		'''
	}

	protected def getNameNotNull(Choice choice) {
		choice.name ?: 'answer_' + (choice.eContainer as ChoiceQuestion).choices.indexOf(choice) 
	}
	
	protected def getSurvey(Page it) {
		eContainer as Survey
	}
	
	def genrateStartServer() '''
		package main;
		
		import org.eclipse.xtext.tutorial.survey.runtime.impl.SurveyServer;
		
		public class StartServer {
			
			public static void main(final String... args) {
				SurveyServer surveyServer = new SurveyServer();
				surveyServer.setPort(8080);
				surveyServer.setPageFlow(new PageFlow());
				surveyServer.addWebroot("./html-gen");
				surveyServer.addWebroot("../org.eclipse.xtext.tutorial.survey.runtime/webroot");
				surveyServer.start();
			}
		}
	'''

}
