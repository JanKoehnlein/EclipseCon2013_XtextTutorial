/*
 * generated by Xtext
 */
package org.eclipse.xtext.tutorial.survey.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.tutorial.survey.survey.Choice
import org.eclipse.xtext.tutorial.survey.survey.ChoiceQuestion
import org.eclipse.xtext.tutorial.survey.survey.FreeTextQuestion
import org.eclipse.xtext.tutorial.survey.survey.Page
import org.eclipse.xtext.tutorial.survey.survey.Survey

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class SurveyGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val survey = resource.getContents().head as Survey
		if(survey != null) {
			for(page: survey.getPages()) {
				fsa.generateFile(page.getName() + '.html', toHtml(survey, page))
			}
		}
	}
	
	protected def toHtml(Survey survey, Page page) '''
		<html>
		<head>
			<title>«survey.getTitle()»</title>
			<meta name="viewport" content="width=device-width, initial-scale=1.0">
			<!-- Bootstrap -->
			<link href="css/bootstrap.css" rel="stylesheet" media="screen">
			<link href="css/survey.css" rel="stylesheet" media="screen">
		</head>
			<body>
				<script src="http://code.jquery.com/jquery.js"></script>
				<script src="js/bootstrap.js"></script>
				<div class="navbar">
						<div class="navbar-inner">
							<a class="brand" href="/">«survey.getTitle()»</a>
							<ul class="nav pull-right">
								<li><a href="/evaluate">Evaluate</a></li>
							</ul>
						</div>
					</div>
					
					<div class="container">
						<form class="form-horizontal" method="POST" action="dispatch" class="form-horizontal">
							<input name="survey" type="hidden" value="«survey.getName()»"/>
							<input name="page" type="hidden" value="«page.getName()»"/>
							
							«FOR question: page.getQuestions()»
								«controlGroup(question)»
							«ENDFOR»
							
							<div class="control-group">
								<div class="controls">
									<input type="reset" class="btn" value="Reset">
									<input type="submit" class="btn" value="Next">
								</div>
							</div>
						</form>
					</div>
			</body>
		</html>
	'''
	
	protected def dispatch controlGroup(FreeTextQuestion question) '''
		<div class="control-group">
			<label class="control-label">«question.getText()»</label>
			<div class="controls">
				<input type="text" name="«question.getName()»">
			</div>
		</div>
	'''
	
	protected def dispatch controlGroup(ChoiceQuestion question) {
		val buttonType = if(question.isSingle()) 'radio' else 'checkbox'
		'''
			<div class="control-group">
				<label class="control-label">«question.getText()»</label>
				<div class="controls">
					«FOR choice: question.getChoices()»
						<label class="«buttonType»">
							<input type="«buttonType»" name="«question.getName()»" value="«choice.getName()»"/>«choice.getText()»
							«IF choice.isFreetext()»
								&nbsp;<input type="text" name="«choice.getName()»">
							«ENDIF»
						</label>
					«ENDFOR»
				</div>
			</div>
		'''
	}
}
