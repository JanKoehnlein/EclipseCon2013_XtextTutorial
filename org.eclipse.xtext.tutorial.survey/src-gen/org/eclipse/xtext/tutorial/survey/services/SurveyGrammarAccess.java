/*
* generated by Xtext
*/
package org.eclipse.xtext.tutorial.survey.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SurveyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSurveyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleSTRINGTerminalRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Assignment cPagesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPagesPageParserRuleCall_3_0 = (RuleCall)cPagesAssignment_3.eContents().get(0);
		
		//Survey:
		//	"survey" name=ID title=STRING pages+=Page*;
		public ParserRule getRule() { return rule; }

		//"survey" name=ID title=STRING pages+=Page*
		public Group getGroup() { return cGroup; }

		//"survey"
		public Keyword getSurveyKeyword_0() { return cSurveyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//title=STRING
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_2_0() { return cTitleSTRINGTerminalRuleCall_2_0; }

		//pages+=Page*
		public Assignment getPagesAssignment_3() { return cPagesAssignment_3; }

		//Page
		public RuleCall getPagesPageParserRuleCall_3_0() { return cPagesPageParserRuleCall_3_0; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuestionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_0 = (RuleCall)cQuestionsAssignment_3.eContents().get(0);
		private final Assignment cNextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cNextPageCrossReference_4_0 = (CrossReference)cNextAssignment_4.eContents().get(0);
		private final RuleCall cNextPageIDTerminalRuleCall_4_0_1 = (RuleCall)cNextPageCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Page:
		//	"page" name=ID "(" questions+=Question* next=[Page] //		followUps+=FollowUp*
		//	")";
		public ParserRule getRule() { return rule; }

		//"page" name=ID "(" questions+=Question* next=[Page] //		followUps+=FollowUp*
		//")"
		public Group getGroup() { return cGroup; }

		//"page"
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//questions+=Question*
		public Assignment getQuestionsAssignment_3() { return cQuestionsAssignment_3; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_0() { return cQuestionsQuestionParserRuleCall_3_0; }

		//next=[Page]
		public Assignment getNextAssignment_4() { return cNextAssignment_4; }

		//[Page]
		public CrossReference getNextPageCrossReference_4_0() { return cNextPageCrossReference_4_0; }

		//ID
		public RuleCall getNextPageIDTerminalRuleCall_4_0_1() { return cNextPageIDTerminalRuleCall_4_0_1; }

		////		followUps+=FollowUp*
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFreeTextQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChoiceQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////FollowUp:
		////	guard=Guard? '->' next=[Page];
		////
		////Guard:
		////	'if'
		////	question=[ChoiceQuestion|QualifiedName]
		////	'='
		////	answer=[Choice|QualifiedName];
		////
		////QualifiedName:
		////	ID ('.' ID)*;
		//Question:
		//	FreeTextQuestion | ChoiceQuestion;
		public ParserRule getRule() { return rule; }

		//FreeTextQuestion | ChoiceQuestion
		public Alternatives getAlternatives() { return cAlternatives; }

		//FreeTextQuestion
		public RuleCall getFreeTextQuestionParserRuleCall_0() { return cFreeTextQuestionParserRuleCall_0; }

		//ChoiceQuestion
		public RuleCall getChoiceQuestionParserRuleCall_1() { return cChoiceQuestionParserRuleCall_1; }
	}

	public class FreeTextQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FreeTextQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//FreeTextQuestion:
		//	"text" name=ID text=STRING;
		public ParserRule getRule() { return rule; }

		//"text" name=ID text=STRING
		public Group getGroup() { return cGroup; }

		//"text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
	}

	public class ChoiceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSingleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSingleSingleKeyword_0_0 = (Keyword)cSingleAssignment_0.eContents().get(0);
		private final Keyword cChoiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChoicesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChoicesChoiceParserRuleCall_5_0 = (RuleCall)cChoicesAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ChoiceQuestion:
		//	single?="single"? "choice" name=ID text=STRING "(" choices+=Choice+ ")";
		public ParserRule getRule() { return rule; }

		//single?="single"? "choice" name=ID text=STRING "(" choices+=Choice+ ")"
		public Group getGroup() { return cGroup; }

		//single?="single"?
		public Assignment getSingleAssignment_0() { return cSingleAssignment_0; }

		//"single"
		public Keyword getSingleSingleKeyword_0_0() { return cSingleSingleKeyword_0_0; }

		//"choice"
		public Keyword getChoiceKeyword_1() { return cChoiceKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//text=STRING
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_0() { return cTextSTRINGTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//choices+=Choice+
		public Assignment getChoicesAssignment_5() { return cChoicesAssignment_5; }

		//Choice
		public RuleCall getChoicesChoiceParserRuleCall_5_0() { return cChoicesChoiceParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Choice:
		//	name=ID text=STRING;
		public ParserRule getRule() { return rule; }

		//name=ID text=STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private SurveyElements pSurvey;
	private PageElements pPage;
	private QuestionElements pQuestion;
	private FreeTextQuestionElements pFreeTextQuestion;
	private ChoiceQuestionElements pChoiceQuestion;
	private ChoiceElements pChoice;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SurveyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.tutorial.survey.Survey".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Survey:
	//	"survey" name=ID title=STRING pages+=Page*;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//Page:
	//	"page" name=ID "(" questions+=Question* next=[Page] //		followUps+=FollowUp*
	//	")";
	public PageElements getPageAccess() {
		return (pPage != null) ? pPage : (pPage = new PageElements());
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	////FollowUp:
	////	guard=Guard? '->' next=[Page];
	////
	////Guard:
	////	'if'
	////	question=[ChoiceQuestion|QualifiedName]
	////	'='
	////	answer=[Choice|QualifiedName];
	////
	////QualifiedName:
	////	ID ('.' ID)*;
	//Question:
	//	FreeTextQuestion | ChoiceQuestion;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//FreeTextQuestion:
	//	"text" name=ID text=STRING;
	public FreeTextQuestionElements getFreeTextQuestionAccess() {
		return (pFreeTextQuestion != null) ? pFreeTextQuestion : (pFreeTextQuestion = new FreeTextQuestionElements());
	}
	
	public ParserRule getFreeTextQuestionRule() {
		return getFreeTextQuestionAccess().getRule();
	}

	//ChoiceQuestion:
	//	single?="single"? "choice" name=ID text=STRING "(" choices+=Choice+ ")";
	public ChoiceQuestionElements getChoiceQuestionAccess() {
		return (pChoiceQuestion != null) ? pChoiceQuestion : (pChoiceQuestion = new ChoiceQuestionElements());
	}
	
	public ParserRule getChoiceQuestionRule() {
		return getChoiceQuestionAccess().getRule();
	}

	//Choice:
	//	name=ID text=STRING;
	public ChoiceElements getChoiceAccess() {
		return (pChoice != null) ? pChoice : (pChoice = new ChoiceElements());
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
