/*
* generated by Xtext
*/
package org.eclipse.xtext.tutorial.myquestionnaire.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.tutorial.myquestionnaire.services.MyQuestionnaireGrammarAccess;

public class MyQuestionnaireParser extends AbstractContentAssistParser {
	
	@Inject
	private MyQuestionnaireGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.tutorial.myquestionnaire.ui.contentassist.antlr.internal.InternalMyQuestionnaireParser createParser() {
		org.eclipse.xtext.tutorial.myquestionnaire.ui.contentassist.antlr.internal.InternalMyQuestionnaireParser result = new org.eclipse.xtext.tutorial.myquestionnaire.ui.contentassist.antlr.internal.InternalMyQuestionnaireParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQuestionAccess().getAlternatives(), "rule__Question__Alternatives");
					put(grammarAccess.getQuestionnaireAccess().getGroup(), "rule__Questionnaire__Group__0");
					put(grammarAccess.getPageAccess().getGroup(), "rule__Page__Group__0");
					put(grammarAccess.getFreeTextQuestionAccess().getGroup(), "rule__FreeTextQuestion__Group__0");
					put(grammarAccess.getChoiceQuestionAccess().getGroup(), "rule__ChoiceQuestion__Group__0");
					put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
					put(grammarAccess.getQuestionnaireAccess().getNameAssignment_1(), "rule__Questionnaire__NameAssignment_1");
					put(grammarAccess.getQuestionnaireAccess().getTitleAssignment_2(), "rule__Questionnaire__TitleAssignment_2");
					put(grammarAccess.getQuestionnaireAccess().getPagesAssignment_3(), "rule__Questionnaire__PagesAssignment_3");
					put(grammarAccess.getPageAccess().getNameAssignment_1(), "rule__Page__NameAssignment_1");
					put(grammarAccess.getPageAccess().getQuestionsAssignment_3(), "rule__Page__QuestionsAssignment_3");
					put(grammarAccess.getPageAccess().getNextAssignment_4(), "rule__Page__NextAssignment_4");
					put(grammarAccess.getFreeTextQuestionAccess().getNameAssignment_1(), "rule__FreeTextQuestion__NameAssignment_1");
					put(grammarAccess.getFreeTextQuestionAccess().getTextAssignment_2(), "rule__FreeTextQuestion__TextAssignment_2");
					put(grammarAccess.getChoiceQuestionAccess().getSingleAssignment_0(), "rule__ChoiceQuestion__SingleAssignment_0");
					put(grammarAccess.getChoiceQuestionAccess().getNameAssignment_2(), "rule__ChoiceQuestion__NameAssignment_2");
					put(grammarAccess.getChoiceQuestionAccess().getTextAssignment_3(), "rule__ChoiceQuestion__TextAssignment_3");
					put(grammarAccess.getChoiceQuestionAccess().getChoicesAssignment_5(), "rule__ChoiceQuestion__ChoicesAssignment_5");
					put(grammarAccess.getChoiceAccess().getNameAssignment_0(), "rule__Choice__NameAssignment_0");
					put(grammarAccess.getChoiceAccess().getTextAssignment_1(), "rule__Choice__TextAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.tutorial.myquestionnaire.ui.contentassist.antlr.internal.InternalMyQuestionnaireParser typedParser = (org.eclipse.xtext.tutorial.myquestionnaire.ui.contentassist.antlr.internal.InternalMyQuestionnaireParser) parser;
			typedParser.entryRuleQuestionnaire();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyQuestionnaireGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyQuestionnaireGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
